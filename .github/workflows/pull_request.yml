name: Build on pull request

on: 
  pull_request:
#    branches:
#      - '**'           # Pull request events matching any branch name
#  workflow_dispatch:    # May be needed to rebuild project that has failed

env:
  DISPLAY_CONTEXT: ${{ secrets.DISPLAY_CONTEXT }} # To display github context for debugging

jobs:

  linux-build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      BUILD_NUMBER: ${{ github.run_number }}
      PHASE_ID: x

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Make builder directory
        run: |
          mkdir -p builder

#      - name: Set branch name
#        run: |
#          BRANCH_NAME=`echo ${{ github.head_ref }} | tr "/" "-"`
#          echo "BRANCH_NAME: ${BRANCH_NAME}"
#          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV

      # Use this to help debug issues
      - name: Dump context
        # See Settings -> Secrets to turn this step on and off
        if: ${{ env.DISPLAY_CONTEXT == 'true' }}
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
          JOB_CONTEXT: ${{ toJSON(job) }}
          STEPS_CONTEXT: ${{ toJSON(steps) }}
        run: |
          echo "GITHUB CONTEXT:"
          echo
          echo "$GITHUB_CONTEXT"
          echo
          echo "JOB CONTEXT:"
          echo
          echo "$JOB_CONTEXT"
          echo
          echo "STEPS CONTEXT:"
          echo
          echo "$STEPS_CONTEXT"

      # Check to see if the libraries user branch (head_ref) exists.
      # If not, use the target branch (base_ref).
      - name: Set libraries branch and workflow
        run: |
          curl -sH "Accept: application/vnd.github.v3+json" \
          -u ${{ secrets.KUHLMANNS_CURL_TOKEN }} -o curl_output.txt \
          https://api.github.com/repos/SKuhlmanns/steves-test-repo/branches/${{ github.head_ref }}
          # If the user branch does not exist, use the branch name to determine if the
          # target branch is a release or develop (default) branch and set the workflow
          # variable accordingly.
          if grep -q "Branch not found" curl_output.txt; then
            LIB_BRANCH=`echo ${{ github.base_ref }}`
            if [[ ${LIB_BRANCH} == *release* ]]; then
              LIB_WORKFLOW=release
            else
              LIB_WORKFLOW=develop
              LIB_BRANCH=develop
            fi
          else
            LIB_BRANCH=`echo ${{ github.head_ref }}`
            LIB_WORKFLOW=pull_request
          fi
          echo "LIB_BRANCH=${LIB_BRANCH}"
          echo "LIB_BRANCH=${LIB_BRANCH}" >> $GITHUB_ENV
          echo "LIB_WORKFLOW=${LIB_WORKFLOW}"
          echo "LIB_WORKFLOW=${LIB_WORKFLOW}" >> $GITHUB_ENV
          rm -f curl_output.txt

      # Check to see if the COMM user branch (head_ref) exists.
      # If not, use the target branch (base_ref).
      - name: Set Comm branch and workflow
        run: |
          curl -sH "Accept: application/vnd.github.v3+json" \
          -u ${{ secrets.KUHLMANNS_CURL_TOKEN }} -o curl_output.txt \
          https://api.github.com/repos/SKuhlmanns/steves-test-repo2/branches/${{ github.head_ref }}
          # If the user branch does not exist, use the branch name to determine if the
          # target branch is a release or develop (default) branch and set the workflow
          # variable accordingly.
          if grep -q "Branch not found" curl_output.txt; then
            COMM_BRANCH=`echo ${{ github.base_ref }}`
            if [[ ${COMM_BRANCH} == *release* ]]; then
              COMM_WORKFLOW=release
            else
              COMM_WORKFLOW=develop
              COMM_BRANCH=develop
            fi
          else
            COMM_BRANCH=`echo ${{ github.head_ref }}`
            COMM_WORKFLOW=pull_request
          fi
          echo "COMM_BRANCH=${COMM_BRANCH}"
          echo "COMM_BRANCH=${COMM_BRANCH}" >> $GITHUB_ENV
          echo "COMM_WORKFLOW=${COMM_WORKFLOW}"
          echo "COMM_WORKFLOW=${COMM_WORKFLOW}" >> $GITHUB_ENV
          rm -f curl_output.txt

      - name: Download Library artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.KUHLMANNS_TOKEN}}
          # Required, workflow file name or ID
          workflow: ${{env.LIB_WORKFLOW}}.yml
          #workflow_conclusion: "completed,success"
          branch: ${{env.LIB_BRANCH}}
          # Optional, will use specified workflow run
          #run_id: 1122334455
          #run_number: 34
          #event: workflow_dispatch
          name: version-num-txt
          path: builder
          repo: SKuhlmanns/steves-test-repo

      - name: Download Comm artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.KUHLMANNS_TOKEN}}
          # Required, workflow file name or ID
          workflow: ${{env.COMM_WORKFLOW}}.yml
          #workflow_conclusion: "completed,success"
          branch: ${{env.COMM_BRANCH}}
          # Optional, will use specified workflow run
          #run_id: 1122334455
          #run_number: 34
          #event: workflow_dispatch
          name: version-num-txt
          path: builder
          repo: SKuhlmanns/steves-test-repo2

      - name: Display contents
        working-directory: builder
        run: |
          ls -l
          cat version_num*.txt

      - name: Build the application
        working-directory: build
        run: |
          echo "Repo Owner:" ${{ github.repository_owner }}

          export VER_NUM=`cat version.txt`
          echo ${VER_NUM}${PHASE_ID}-${BUILD_NUMBER} > version_num_mc.txt
          echo "PHASE ID: ${PHASE_ID}"
          echo "BUILD NUMBER: ${BUILD_NUMBER}"
          cat version_num*.txt
          echo ${{github.repository}}
          bash bbuild.sh ..

      - name: Upload version.txt artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v2
        with:
          name: version-txt
          retention-days: 14
          path: |
            build/version.txt
#            build/version_num_mc.txt

      - name: Upload version_num.txt artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v2
        with:
          name: version-num-txt
          retention-days: 14
          path: |
            build/version_num_mc.txt
