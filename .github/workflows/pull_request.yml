name: Build on pull request

on: 
  pull_request:
#    branches:
#      - '**'           # Pull request events matching any branch name
#  workflow_dispatch:    # May be needed to rebuild project that has failed

env:
  DISPLAY_CONTEXT: ${{ secrets.DISPLAY_CONTEXT }} # To display github context for debugging

jobs:

  linux-build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      BUILD_NUMBER: ${{ github.run_number }}
      PHASE_ID: x

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Make builder directory
        run: |
          mkdir -p builder

      - name: Set branch from github reference
        run: |
          BRANCH_NAME=`echo ${{ github.head_ref }} | tr "/" "-"`
          echo "BRANCH_NAME: ${BRANCH_NAME}"
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV

      # Use this to help debug issues
      - name: Dump context
        # See Settings -> Secrets to turn this step on and off
        if: ${{ env.DISPLAY_CONTEXT == 'true' }}
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
          JOB_CONTEXT: ${{ toJSON(job) }}
          STEPS_CONTEXT: ${{ toJSON(steps) }}
        run: |
          echo "GITHUB CONTEXT:"
          echo
          echo "$GITHUB_CONTEXT"
          echo
          echo "JOB CONTEXT:"
          echo
          echo "$JOB_CONTEXT"
          echo
          echo "STEPS CONTEXT:"
          echo
          echo "$STEPS_CONTEXT"

      # Check to see if the libraries feature branch (head_ref) exists.
      # If not, use the target branch (base_ref).
      - name: Get libraries branch 
        run: |
          curl -sH "Accept: application/vnd.github.v3+json" \
          -u ${{ secrets.KUHLMANNS_CURL_TOKEN }} -o curl_output.txt \
          https://api.github.com/repos/SKuhlmanns/steves-test-repo/branches/${{ github.head_ref }}
          if grep -q "Branch not found" curl_output.txt; then
            LIB_BRANCH=`echo ${{ github.base_ref }} | tr "/" "-"`
            echo "LIB_BRANCH=${LIB_BRANCH}" 
            echo "LIB_BRANCH=${LIB_BRANCH}" >> $GITHUB_ENV 
          else
            LIB_BRANCH=`echo ${{ github.head_ref }} | tr "/" "-"`
            echo "LIB_BRANCH=${LIB_BRANCH}" 
            echo "LIB_BRANCH=${LIB_BRANCH}" >> $GITHUB_ENV 
          fi
          rm -f curl_output.txt

#      - name: Download libraries artifacts
#        if: ${{ success() }}
#        uses: aochmann/actions-download-artifact@1.0.4
#        with:
#          # Optional, GitHub token
#          github_token: ${{secrets.KUHLMANNS_TOKEN}}
#
#          # Optional, uploaded artifact name,
#          # will download all artifacts if not specified
#          # and extract them in respective subdirectories
#          # https://github.com/actions/download-artifact#download-all-artifacts
#          name: version-num-${{ env.LIB_BRANCH }}-txt
#
#          # Optional, download latest artifact
#          latest: true
#
#          # Optional, directory where to extract artifact
#          path: builder
#
#          # Optional, defaults to current repo
#          repo: SKuhlmanns/steves-test-repo

      - name: Download run_id from steves-test-repo
        uses: aochmann/actions-download-artifact@1.0.4
        with:
          github_token: ${{ secrets.KUHLMANNS_TOKEN }}
          name: run_id-${{ env.LIB_BRANCH }}.txt
          latest: true
          path: builder
          repo: SKuhlmanns/steves-test-repo

      - name: Get Library artifacts
        working-directory: builder
        run: |
          # Set the run_id
          cat run_id-${{ env.LIB_BRANCH }}.txt
          run_id=`cat run_id-${{ env.LIB_BRANCH }}.txt`
          rm run_id-${{ env.LIB_BRANCH }}.txt
          # Use the run_id and token/password to get artifacts with an external bash script
          ../build/get_github_artifacts.sh ${run_id} ${{ secrets.KUHLMANNS_TOKEN }} steves-test-repo lib_artifact.lst

      - name: Display Library contents
        working-directory: builder
        run: |
          ls -l
          cat version_num*.txt

      - name: Build the application
        working-directory: build
        run: |
          echo "Repo Owner:" ${{ github.repository_owner }}
          echo "Run ID:" ${{ github.run_id }}
          echo ${{ github.run_id }} > run_id-${{ env.BRANCH_NAME }}.txt

          export VER_NUM=`cat version.txt`
          echo ${VER_NUM}${PHASE_ID}-${BUILD_NUMBER} > version_num_comm.txt
          echo "PHASE ID: ${PHASE_ID}"
          echo "BUILD NUMBER: ${BUILD_NUMBER}"
          cat version_num*.txt
          echo ${{github.repository}}
          bash bbuild.sh ..

      - name: Upload version.txt artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v2
        with:
          name: version-${{ env.BRANCH_NAME }}-txt
          retention-days: 14
          path: |
            build/version.txt
#            build/version_num_comm.txt

      - name: Upload version_num.txt artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v2
        with:
          name: version-num-${{ env.BRANCH_NAME }}-txt
          retention-days: 14
          path: |
            build/version_num_comm.txt

      - name: Upload run_id artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v2
        with:
          name: run_id-${{ env.BRANCH_NAME }}.txt
          retention-days: 14
          path: |
            build/run_id-${{ env.BRANCH_NAME }}.txt
